set nocompatible
set title
set number
set ruler
set nobackup
set nowritebackup
set noswapfile
set ignorecase
set sw=2 sts=2 tabstop=2 et
set wildmode=list:longest
set autoindent 
set backspace=indent,eol,start
set notimeout " don't timeout on mappings
set ttimeout  " do timeout on terminal key codes
" set timeoutlen=100 " timeout after 100 msec
set hls
" http://stackoverflow.com/questions/563616/vim-and-ctags-tips-and-tricks/741486#741486
set tags=./tags;/
set scrolloff=10 " avoids moving edges of screen automatically
set nofoldenable " disable folding
set nowrap
set backspace=indent,eol,start " modern way
" set term=builtin_ansi " fix arrow keys in insert mode
" set clipboard+=unnamed

"If you set 'hidden' Vim will keep the buffer around when you leave it.
"You won't lose anything, except a little memory for the buffer to live in.
set hidden

" enable virtual edit to all
"set virtualedit=all
" Enable commad-line completion
set wildmenu

" one more place in normal mode
set virtualedit=onemore

" QUICMAP
" c => e (change c is e)

"backspace
  " use backspace in normal mode samy way as in insert mode
  nnoremap <backspace> i<bs><esc>`^

"del
  nnoremap <del> i<del><esc>`^

", #q
  "comma
  "noremap , i,

". #w --all used, repeat

"J #e
  noremap j r
  noremap J R

"p #r
  noremap p t
  noremap P T

"y #t
  "Replace character
  "noremap y r
  "noremap y e
  "noremap Y E
  "noremap y f
  "noremap Y F

"ö #y
  " Macro recording
  noremap ö q

"g #u
  "search
  noremap <C-g> n
  "default: join line without space
  "noremap gj gj
  "join line with space
  "noremap gj J
  "noremap g G
  "noremap G n
  "Empty line up
  "map <silent> gm <esc>:set paste<cr>:normal! O<cr><esc>:set nopaste<cr><down>
  "map <silent> gt <esc>:set paste<cr>:normal! o<cr><esc>:set nopaste<cr><down>
  "nnoremap <silent> <C-@> <esc>:let cursor_pos = getpos(".")<cr>:set paste<cr>:normal! o<cr><esc>:set nopaste<cr>:call setpos(".", cursor_pos)<cr>
  nnoremap <silent> gO <esc>:let cursor_pos = getpos(".")<cr>:let cursor_col = cursor_pos[1]<cr>:let cursor_pos[1] = cursor_col + 1<cr>:set paste<cr>:normal! O<cr>:call setpos(".", cursor_pos)<cr>:set nopaste<cr>
  nnoremap <silent> go <esc>:let cursor_pos = getpos(".")<cr>:set paste<cr>:normal! o<cr><esc>:set nopaste<cr>:call setpos(".", cursor_pos)<cr>:set nopaste<cr>

  "
  "split
  "noremap gs <Esc>:bo sp 
  "noremap gv <Esc>:

"m #i
  "Up
  "noremap m k
  noremap m k
  noremap M k
  "noremap <C-m> i2
  "Jumping back-forward disabled at 2014.07.02
  "noremap gm <C-^>
  "map <silent> <esc>m :wincmd k<cr>
  "map <silent> <esc>t :wincmd j<CR>
  "map <silent> <esc>r :wincmd h<CR>
  "map <silent> <esc>n :wincmd l<CR>

"l #o
  noremap l <pageup>10<up>
  noremap L gg  
  noremap <C-l> <esc>:
  "noremap L N
  "noremap <C-l> <C-n>
  "noremap L G
  "noremap <C-l> <C-g>
  "onoremap l g
  "page up
  "noremap <C-n> :R<cr>
  "ruby end
  "noremap <C-l> :FuzzyFinderTextMateRefreshFiles<cr>:FuzzyFinderTextMate<cr>
  " inoremap <C-l> <cr>end<up><esc>A
  "page top
  "noremap L gg

"õ #p -- not in use, not easy key

"q #[
  "quit
  noremap q :q<cr>
  noremap Q :q!<cr>
  noremap <C-q> <C-]>
  "quit
  "noremap <S-Q> :q!<cr>

"a #a
  nnoremap a v
  nnoremap A V
  nnoremap <C-a> <C-V>

"A
  "noremap A v

"o #s
  "quit
  "noremap o <esc>:q<cr>
  " Split screen
  "noremap <C-o> <C-w>w
  " noremap <C-o> <esc>:q!<cr>

"O
  "quit
  "noremap O <esc>:q!<cr>

"e #d
  "line below with autoindent fix
  "noremap e o<space><bs>
  noremap e c
  noremap E C

"E
  "Empty line down
  "map <silent> E <esc>:set paste<cr>:normal! o<cr><esc>:set nopaste<cr><up>

"i #f
  "in front of cursor
  "noremap i i
  "vnoremap i i
  "in the end of line
  "noremap I I

"u #g
  "at the end of cursor
  noremap u a
  "at the end of line
  noremap U A

"d #h
  "Start commandline
  "noremap d :
  "noremap dd "+dd
  "vnoremap d "+d
  " noremap D :NB! remaped to S

  " experimental backspace, not sure if ok
  map <c-d> <bs>

"r #j
  "left
  "noremap r h
  noremap r b
  noremap R h
  "going back
  map <c-r> <C-O>
  
"t #k
  "down
  noremap t j
  noremap T j
  "noremap T M
  noremap <C-m> <C-t>
  "inoremap t j
  "lnoremap t j
  "inoremap T J
  "lnoremap T J

"n #l
  "right
  "noremap n l
  " move right by word
  noremap n w
  noremap N l
  map <c-n> gf
  "map <C-n> gf
  "map <C-n> :R<cr>

  "Go Ctrl-]
  "noremap <C-n> <C-]>
  " map n <right>
  "Go to some file
  "map N gf

"s #;
  "delete
  "noremap s :call Delete_key()<cr>
  "noremap s i<del><esc>l

"S
  "delete
  noremap S d^

"k #,
  "noremap k :w<cr>
  "noremap K :w<cr>
  "oremap K :
  "noremap k :
  "noremap k :
  "noremap k :
  "noremap k :
  "noremap k :
  """"""""""noremap k :
  """"""""""noremap K :
  "noremap <C-k> <C-m>
  "backspace
  noremap k x
  " noremap k i<BS><esc>l
  "delete
  noremap K D
  "cnoremap K <C-u>

"z #z
  "undo
  noremap z u
  noremap Z U
  noremap <C-z> u
  "undo
  noremap Z <C-r>

"x #x
  "cut
  noremap x "+d
  vnoremap x "+d
  "nnoremap xx <esc>V"+d
  "noremap <C-x> "+d
  
"X
  "cut
  "noremap X D

"c #c
  "copy
  noremap c "+y
  noremap C y
  "noremap c y
  "noremap c "+y
  "noremap <C-c> "+y
  "vnoremap <silent> c "+y
  "cnoremap <C-c> "+y

"v #v
  noremap v "+P

  "*p would preserve formatting disabled at 2014.07.02
  "noremap gv "*p
  "noremap gV "*P
  "noremap <silent> v :set paste<cr>I"+P<esc>:set nopaste<cr>
  "noremap <silent> <C-v> :set paste<cr>"+p<esc>:set nopaste<cr>

  noremap V p

"ü #b
  " z extra cmds
  noremap ü z
  noremap üü zz " center of screen, somehow it didn't work without remap
  
  "" zf create a fold
  ""noremap üf zf

  "" zj moves the cursor to the next fold.
  ""noremap üh zj

  "" zk moves the cursor to the previous fold.
  ""noremap ül zk

  "" zo opens a fold at the cursor.
  ""noremap ün zo

  "" zc close one fold under the cursor.
  ""noremap ür zc

  "" zM closes all open folds.
  ""noremap üt zM  

  "" zR open all folds.
  ""noremap üm zR

  "" zm increases the foldlevel by one.
  ""noremap üür zm

  "" zr decreases the foldlevel by one.
  ""noremap üün zr

  "" zd deletes the fold at the cursor.
  ""noremap ük zd

  "" zE deletes all folds.
  "noremap üK zE

"b #n
  " Till before
  noremap b t
  noremap B T

  "For new layout
  inoremap µ <esc>:w<cr><right>
  nnoremap µ :w<cr>
  cnoremap µ <esc>
  vnoremap µ <esc>

"µ
  "save
  "inoremap µ <esc>:w<cr>
  "noremap µ <esc>
  "cnoremap µ <esc>

"h #m
  "page down
  "noremap h <pagedown>10<down>
  noremap h <pagedown>10<down>
  noremap H G
  "no H R
  "noremap <C-h> <C-r>
  "page bottom
  "noremap H GG

"f #,
  "searching
  "noremap <C-f> :set hls<cr>/
  noremap <C-f> /
  cmap <silent> <C-f> <esc>:noh<cr>

"w #.
  "default: move cursor to window 
  "below
  noremap ät <C-w>j
  "up
  noremap äm <C-w>k
  "left
  noremap är <C-w>h
  "right
  noremap än <C-w>l

  noremap äo <C-w>o

  noremap äv :vs<cr>

"ä #/
  "noremap ä :w<cr>
  "noremap Ä :wq<cr>

"space
   vmap <space> <plug>NERDCommenterToggle

"tab
" inoremap <tab> <c-n>
" inoremap <tab> <c-x><c-o>

" Enter
" inoremap <expr> <CR> ((pumvisible())?("\<C-Y>"):("\<CR>"))
" inoremap <expr> <cr> pumvisible() ? "\<C-Y>" : "\<C-Y>"
" next value in autocomplete
inoremap <expr> <tab> pumvisible() ? "\<Down>" : "\<c-x><c-o>"

" not working, will make up/down keys broken
" inoremap <expr> <Esc>      pumvisible() ? "\<C-e>" : "\<Esc>"

inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
" inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
" inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"

"Page down
  "noremap <pagedown> <pagedown>10<down>

"Page up
  "noremap <pageup> <pagup>10<up>

"Searching
  "noremap # :set hls<cr>#

"Going back
  "noremap Mr <C-I>

"Clean command line
  "Clean command line esc - something goes wrong here
  " cnoremap <esc> <C-u>

" local stuff
if hostname() == "priit"


" VUNDLER stuff
" Brief help
" :PluginList          - list configured plugins
" :PluginInstall(!)    - install (update) plugins
" :PluginSearch(!) foo - search (or refresh cache first) for foo
" :PluginClean(!)      - confirm (or auto-approve) removal of unused plugin
"
" see :h vundle for more details or wiki for FAQ
" NOTE: comments after Bundle command are not allowed..
filetype off " required by Vundler
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'
Plugin 'vim-ruby/vim-ruby'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'scrooloose/nerdcommenter'
Plugin 'jamis/fuzzyfinder_textmate'

Plugin 'plasticboy/vim-markdown'
let g:vim_markdown_folding_disabled=1
let g:vim_markdown_no_default_key_mappings=1

Plugin 'saltstack/salt-vim'
" tag colors same with colon
Plugin 'priit/vim-haml'    
" added newline after end
Plugin 'priit/vim-endwise' 
Plugin 'kchmck/vim-coffee-script'
Plugin 'othree/csscomplete.vim'

" Plugin 'stefanoverna/vim-i18n'

" Creates new dirs automatically
Plugin 'duggiefresh/vim-easydir'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" End of vundler

" Autocomplete
" set omnifunc=syntaxcomplete#Complete
" set omnifunc=csscomplete#CompleteCSS
" autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS noci
" autocmd BufNewFile,BufRead *.scss             set ft=scss.css
" autocmd BufNewFile,BufRead *.sass             set ft=sass.css
filetype plugin on
" au FileType php setl ofu=phpcomplete#CompletePHP
" au FileType ruby,eruby setl ofu=rubycomplete#Complete
" au FileType html,xhtml setl ofu=htmlcomplete#CompleteTags
" au FileType c setl ofu=ccomplete#CompleteCpp
" au FileType css setl ofu=csscomplete#CompleteCSS

set completeopt=noinsert,menuone

au filetype help set nonumber
"autocmd FileType javascript setlocal cindent  " added for js 2007.12.05

"Rails Fabrication
" autocmd User Rails Rnavcommand fabricator spec/fabricators -suffix=_fabricator.rb -default=model()

"set mouse=a
syntax on

" colerscheme stuff
colorscheme dark-ruby
" colorscheme codeschool

" Move cursor to the last position
:au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal g`\"" | endif
 
"You need to do this to clear the PAGER environment variable inside of Vim.
"This is to handle the case where you start Vim normally and want to use Vim's
"Man" function. " let ruby_operators=1
let $PAGER=''

" CD to whatever directory the current buffer is using. 
com! CD cd %:p:h

" yaml autoident
" autocmd FileType yaml set ai sw=2 sts=2 et
" au! BufRead,BufNewFile *.sass setfiletype sass
" au! BufRead,BufNewFile *.haml setfiletype haml
" autocmd BufRead *spec.rb set foldmethod=syntax

" function Return_key and BS_key from Jochen Baier, 2006 (email@Jochen-Baier.de)
" http://www.vim.org/scripts/script.php?script_id=1579
function! Return_key()
  let buftype = getbufvar(bufnr(''), '&buftype') 
  
  if buftype != ""
    unmap <CR>
    execute "normal \<CR>"
    nnoremap <silent> <CR> :call Return_key()<CR>
  else
    execute "normal i\<CR>\<ESC>" 
  endif
endfunction           

nnoremap <silent> <CR> :call Return_key()<CR>
"nnoremap <silent> <CR> i\<cr>\<esc>
nnoremap <silent> <SPACE> i<SPACE><ESC>l

" NERDCommenter does need to creat mappings
let NERDCreateDefaultMappings="0"
" NERD should add one spece for rubocop validations
let NERDSpaceDelims="1"

" fuzzyfinder_textmate
let g:fuzzy_ignore = '.o;.obj;.bak;.exe;.pyc;.pyo;.DS_Store;.db'

" improve autocomplete/fuzzyfinder menu color
highlight Pmenu ctermbg=238 gui=bold

func Eatchar(pat)
  let c = nr2char(getchar(0))
 return (c =~ a:pat) ? '' : c
endfunc
"Rails alternative files
"  noremap gm <esc>:A<cr>
"  noremap gl <esc>:R<cr>

cabbr bsp botright sp
"cabbr rsp vert botright sp
"cabbr lsp vert topleft sp
cabbr lsp bel vsp
"Rails
"  cabbr c Econtroller<cr>
 cabbr co Econtroller
 cabbr coa Econtroller application<cr>
"  cabbr cos Eedit spec/controllers/<C-R>=Eatchar('\s')<cr>
"  cabbr m Emodel<cr>
 cabbr mo Emodel
"  cabbr mop Emodel p<tab>
"  cabbr mos Eedit spec/models/<C-R>=Eatchar('\s')<cr>
"  cabbr v Eview<cr>
 cabbr vi Rview
 cabbr via Rview layouts/application<cr>

  "vie == :e apps/view/post/index.html.haml
 cabbr vie Rview <C-R><C-W>.haml<C-R>=Eatchar('\s')<cr>
 cabbr he Ehelper
"  cabbr hes Eedit spec/helpers/<C-R>=Eatchar('\s')<cr>
 cabbr hea Ehelper application<cr>
"  cabbr ha Ehelper application<cr>
 cabbr st Estylesheet
 cabbr sta Estylesheet application<cr>
 cabbr sas Eedit app/stylesheets/screen.sass<cr>
"  cabbr sasi Eedit app/stylesheets/ie.sass<cr>
"  cabbr sasa Eedit app/stylesheets/base.sass<cr>
 " cabbr routes Eedit config/routes.rb<cr>
 cabbr ro Eedit config/routes.rb<cr>
"  cabbr mi Emigration
"  cabbr mia Emigration 001<cr>
 cabbr sc Eedit db/schema.rb<cr>
 cabbr ja Ejavascript
 cabbr jaa Ejavascript application<cr>
 cabbr spa Eedit spec/rails_helper.rb<cr>
"  cabbr env Eedit config/environment.rb<cr>
"  cabbr conf Eedit config/environment.rb<cr>
"  cabbr con Eedit config/environment.rb<cr>
"  cabbr data Eedit config/database.yml<cr>
 cabbr da Eedit config/database.yml<cr>
"  cabbr a A<cr>
"  cabbr ae AE<cr>
"  cabbr r R<cr>
"  cabbr re R<cr>
 cabbr fi :FuzzyFinderTextMate<cr>

"Ctag build
cabbr bta :!/usr/bin/ctags -R --exclude=.git --exclude=log * `rvm gemdir`/gems `$MY_RUBY_HOME`/lib
"cabbr bta :!/usr/bin/ctags -R --exclude=.git --exclude=log * /usr/local/rvm/gems/ruby-1.9.2-p136@rails3/gems

" Fix esc to the same place
"inoremap <esc> <esc><right>
end

"Highlight text overflow
highlight OverLength ctermbg=black ctermfg=yellow guibg=#592929
match OverLength /\%101v\+/

"Nginx config
au BufRead,BufNewFile *.nginx set ft=nginx
au BufRead,BufNewFile */etc/nginx/* set ft=nginx
au BufRead,BufNewFile */usr/local/nginx/conf/* set ft=nginx
au BufRead,BufNewFile nginx.conf set ft=nginx

" remap surrond keys
let g:surround_no_mappings = 1
nmap ds  <Plug>Dsurround
nmap es  <Plug>Csurround
nmap eS  <Plug>CSurround
nmap ys  <Plug>Ysurround
" nmap iS  <Plug>YSurround
" nmap yss <Plug>Yssurround
" nmap ySs <Plug>YSsurround
" nmap ySS <Plug>YSsurround
" xmap S   <Plug>VSurround
" xmap gS  <Plug>VgSurround
